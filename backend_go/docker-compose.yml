services:
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_BROKER_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      - KAFKA_CFG_LOG_RETENTION_HOURS=168    # хранить логи 7 дней
      - KAFKA_CFG_LOG_RETENTION_BYTES=1073741824  # 1 ГБ на партицию
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app-net
  
  kafka-init:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    container_name: kafka-init
    # directly call the kafka-topics.sh binary as the entrypoint
    entrypoint:
      - /opt/bitnami/kafka/bin/kafka-topics.sh
    # pass ALL flags as a YAML list so they don't get mangled
    command:
      - --bootstrap-server
      - kafka:9092
      - --create
      - --if-not-exists
      - --topic
      - logs
      - --partitions
      - "1"
      - --replication-factor
      - "1"
    networks:
      - app-net

  kafka-group-init:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    container_name: kafka-group-init
    entrypoint:
      - /opt/bitnami/kafka/bin/kafka-consumer-groups.sh
    command:
      - --bootstrap-server
      - kafka:9092
      - --group
      - log-consumer
      - --reset-offsets
      - --to-earliest
      - --execute
      - --topic
      - logs
    networks:
      - app-net

  kafka-ui:
    image: 'provectuslabs/kafka-ui:latest'
    container_name: kafka-ui
    ports:
      - '8082:8080'
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - app-net

  go-app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    container_name: go-app
    environment:
      # Used by your app to know where Kafka lives
      KAFKA_BROKERS: "kafka:9092"
      KAFKA_TOPIC: "logs"
      PORT: "8081"
    ports:
      # HTTP API + metrics
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    networks:
      - app-net

volumes:
  kafka_data:

networks:
  app-net:
    driver: bridge
